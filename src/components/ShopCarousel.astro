---
// ShopCarousel.astro
const { products, nameFontSize = "1rem", priceFontSize = "1rem" } = Astro.props;
import 'glider-js/glider.min.css';

// unique id per instance so we can scope initialization
const uid = `carousel-${Math.random().toString(36).slice(2, 9)}`;
---
<style>
.carousel-container {
  position: relative;
  width: 100%;
  overflow: hidden;
  padding: 1rem;
  background-color: #ff66cc00;
  border-radius: 12px;
}

.glider {
  display: flex;
  gap: 1rem;
}

.product-card {
  flex: 0 0 auto;
  width: 180px;
  text-align: center;
  text-decoration: none;
  color: #ffffff;
}

.product-card img {
  width: 180px;
  height: 180px;
  object-fit: cover;
  border-radius: 8px;
}

/* Use CSS variables for dynamic font sizes */
.product-name {
  margin-top: 0.5rem;
  font-weight: 700;
  font-family: "League Script Two", sans-serif;
  color: #ffffff;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.6);
  font-size: var(--name-font-size);
}

.product-price {
  color: #2eddddff;
  font-family: "Graduate", sans-serif;
  font-size: var(--price-font-size);
}

.glider-prev,
.glider-next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 10;
  background: transparent;
  border: 2px solid #ff66cc;
  color: #ff66cc;
  border-radius: 50%;
  width: 2rem;
  height: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}

.glider-prev { left: 0; }
.glider-next { right: 0; }
</style>

<div 
  id={uid} 
  class="glider-contain carousel-container"
  style={`--name-font-size: ${nameFontSize}; --price-font-size: ${priceFontSize};`}
>
  <button aria-label="Previous" class="glider-prev" type="button">‹</button>
  <div class="glider">
    {products.map(product => (
      <a href={product.link} class="product-card" target="_blank" rel="noopener noreferrer">
        <img src={product.image} alt={product.name} />
        <div class="product-name">{product.name}</div>
        <div class="product-price">{product.price}</div>
      </a>
    ))}
  </div>
  <button aria-label="Next" class="glider-next" type="button">›</button>
</div>

<script>
  import('glider-js').then(({ default: Glider }) => {
    const root = document.getElementById('${uid}');
    if (!root) return;

    const init = () => {
      if (root.__gliderInited) return;
      const gliderEl = root.querySelector('.glider');
      new Glider(gliderEl, {
        slidesToShow: 5,
        slidesToScroll: 1,
        draggable: true,
        arrows: {
          prev: root.querySelector('.glider-prev'),
          next: root.querySelector('.glider-next'),
        },
        responsive: [
          { breakpoint: 768, settings: { slidesToShow: 2, slidesToScroll: 1 } },
          { breakpoint: 1024, settings: { slidesToShow: 4, slidesToScroll: 1 } },
        ],
      });
      root.__gliderInited = true;
    };

    const isVisible = (el) =>
      el.offsetParent !== null && getComputedStyle(el).visibility !== 'hidden';

    if (isVisible(root)) {
      init();
    } else {
      const panel = root.closest('.carousel-tab');
      if (panel) {
        const mo = new MutationObserver(() => {
          if (panel.classList.contains('active-tab') && isVisible(root)) {
            init();
            mo.disconnect();
          }
        });
        mo.observe(panel, { attributes: true, attributeFilter: ['class', 'style'] });
      } else {
        requestAnimationFrame(() => isVisible(root) && init());
      }
    }
  });
</script>
